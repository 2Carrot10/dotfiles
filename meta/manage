#!/bin/python
import subprocess
import re
import os
import json
import argparse
import sys


class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'


parser = argparse.ArgumentParser()

parser.add_argument("-s", "--silent",
                    help="Do not display logs",
                    action="store_true")

parser.add_argument("-t", "--transparent",
                    help="All shell commands must be aproved before running",
                    action="store_true")

parsers = {}

subp = parser.add_subparsers(title="subcommands", dest="command")

parsers["track"] = subp.add_parser("track", help="Start tracking a new file")
parsers["help"] = subp.add_parser("help", help="Show this help message and exit")
parsers["list"] = subp.add_parser("list", help="List all tracked files")
parsers["info"] = subp.add_parser("info", help="Get all static tracking "
                                  + "information. (Stored in .meta.json)")

parsers["status"] = subp.add_parser("status", help="Get current loaded status of" +
                                    " tracked files")
parsers["sync"] = subp.add_parser("sync", help="Sync tracked files and" +
                                  " current active files")

parsers["info"].add_argument("-r", "--raw", help="display raw config" +
                             " file instead of formatted config",
                             action="store_true")

parsers["sync"].add_argument("-t", "--tracked",
                             help="In the case of a conflict, replace active" +
                             " with tracked",
                             action="store_true")

parsers["track"].add_argument("filename",
                              help="Start tracking a new file",
                              nargs="*")


parsers["track"].add_argument("filename", nargs='*',
                              help="Full path of file(s) to start tracking.")

parsers["sync"].add_argument("-a", "--active",
                             help="In the case of a conflict, replace" +
                             " tracked with active",
                             action="store_true")


for n in ("track", "list", "status", "info", "sync"):
    parsers[n].add_argument("filename", nargs='*',
                            help="Name of file(s) to operate upon.")

this_script_dir = os.path.dirname(os.path.realpath(__file__))
dots_dir = os.path.normpath(os.path.join(this_script_dir, "../dots/"))
dots = os.listdir(dots_dir)

args = parser.parse_args()

specified_files = []
if hasattr(args, "filename"):
    useFileSelection = len(args.filename) > 0

    if useFileSelection:
        file_args = args.filename
        for file_arg in file_args:
            if file_arg not in dots:
                print(f"Error! {file_arg} does not exist.")
            else:
                specified_files.append(file_arg)
    else:
        specified_files = dots


yesRegEx = re.compile("y(es)?", re.IGNORECASE)
noRegEx = re.compile("n(o)?", re.IGNORECASE)


def confirm_response(question):
    response = input(question)
    if yesRegEx.match(response):
        return True
    if noRegEx.match(response):
        return False

    print(f"Error! could not understand {response}")
    return confirm_response(question)


def excecute_command(command):
    subprocess.run(command, shell=True)


def run_commands_with_pref(command):
    confirm_command(command)


def confirm_command(command):
    if confirm_response(
        f"Would you like to excecute this command: '{command}' (Y/N): "
    ):
        print(f"Excecuting '{command}'...")
        excecute_command(command)
    else:
        print("Command will not be excecuted.")


def info(name):
    config_path = os.path.join(dots_dir, name, config_file_name)
    with open(config_path) as location_file:
        if args.raw:
            print(location_file.read())
        else:
            data = json.load(location_file)
            for d in data:
                print(f"{d}: {data[d]}")


def status(name):
    status_string = "not yet added"
    print(bcolors.FAIL, end='')

    config_path = os.path.join(dots_dir, name, config_file_name)
    try:
        with open(config_path) as location_file:
            data = json.load(location_file)
            target_files = os.path.normpath(
                os.path.join(dots_dir, name, data["target_files"])
            )
            desired_endpoint = os.path.expanduser(data["desired_endpoint"])
            endpoint_with_name = os.path.join(
                desired_endpoint,
                os.path.basename(os.path.normpath(target_files))
            )

            if os.path.islink(endpoint_with_name):
                if os.path.realpath(endpoint_with_name) == target_files:
                    status_string = "correctly set up"
                    print(bcolors.OKGREEN, end='')
                else:
                    status_string = f"wrong symlink:{os.path.realpath(endpoint_with_name)} vs {target_files}"
                    print(bcolors.FAIL, end='')
            elif os.path.isdir(endpoint_with_name):
                status_string = "desired location contains incorrect directory"
            elif os.path.isfile(endpoint_with_name):
                status_string = "desired location contains incorrect file"
    except Exception as e:
        print(bcolors.FAIL, end='')
        status_string = f"failed to open config: {e}"
    print(status_string)
    print(bcolors.ENDC, end='')


def link_files(name):
    location_conf_path = os.path.join(dots_dir, name, config_file_name)

    if not os.path.isfile(location_conf_path):
        print(f"Configuration could not be found for {name}")
        return

    if not useFileSelection:
        if not confirm_response("Would you like to add these dotfiles? (Y/N): "):
            return

    with open(location_conf_path) as location_file:
        data = json.load(location_file)
        target_files = os.path.normpath(os.path.join(dots_dir, name, data["target_files"]))
        desired_endpoint = os.path.expanduser(data["desired_endpoint"])
        endpoint_with_name = os.path.join(
            desired_endpoint,
            os.path.basename(os.path.normpath(target_files))
        )

        if os.path.islink(endpoint_with_name):

            if os.path.realpath(endpoint_with_name) == target_files:

                if not args.silent:
                    print(f"{bcolors.OKBLUE}{endpoint_with_name}{bcolors.ENDC} is a link to {bcolors.OKBLUE}{os.path.realpath(endpoint_with_name)}{bcolors.ENDC}")
                    print("Already correctly linked. There is no more work to do.")
                return

            print(f"{bcolors.OKBLUE}{endpoint_with_name}{bcolors.ENDC} is a link to {bcolors.OKBLUE}{os.path.realpath(endpoint_with_name)}{bcolors.ENDC}")
            if confirm_response("Remove link? (Y/N): "):
                run_commands_with_pref(f"rm {endpoint_with_name}")

        elif os.path.isdir(endpoint_with_name) or os.path.isfile(endpoint_with_name):
            print(f"{bcolors.OKBLUE}{endpoint_with_name}{bcolors.ENDC} already"
                  + " exists! It must be removed before the new dotfiles can "
                  + "be added."
                  )
            if confirm_response("Remove files? (Y/N): "):
                run_commands_with_pref(f"rm -r {endpoint_with_name}")

        if os.path.isdir(endpoint_with_name) or os.path.exists(endpoint_with_name):
            print(f"{bcolors.OKBLUE}{endpoint_with_name}{bcolors.ENDC} is full. No further opperations can be done on this file.")
            return
        if run_commands_with_pref(f"ln -s {target_files} {desired_endpoint}"):
            if not args.silent:
                print(f"Sucsessfuly added dotfiles from {bcolors.OKBLUE}{name}{bcolors.ENDC}!")


config_file_name = ".meta.json"


def forAllFiles(func, seperator = True, name = True, newLine = True):
    if len(specified_files) == 0:
        print("No files selected")
    elif len(specified_files) == 1:
        func(specified_files[0])
    else:
        i = 0
        for file in specified_files:
            if i > 0 and seperator:
                print()#print(f"{bcolors.BOLD}{"‚îÅ" * 50}{bcolors.ENDC}")
            i += 1
            if name:
                if newLine:
                    print("* ", end="")
                print(file + ": ", end="\n" if newLine else "")
            func(file)


def list_files(file):
    print(file)

def track():
    pass

try:
    if args.command is None or args.command == "help":
        parser.print_help()
    else:
        if args.command == "status":
            forAllFiles(status, False, True, False)
        if args.command == "info":
            forAllFiles(info, True, True, True)
        if args.command == "sync":
            forAllFiles(link_files, False, False)
        if args.command == "list":
            forAllFiles(list_files, False, False)
        if args.command == "track":
            forAllFiles(track)
except KeyboardInterrupt:
    print()
    sys.exit(1)
