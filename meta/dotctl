#!/bin/python
from enum import Enum
import subprocess
import re
import glob
import os
import json
import argparse
import sys
from filecmp import dircmp, cmp


class col:
    HEADER = '\033[95m'
    BLUE = '\033[94m'
    CYAN = '\033[96m'
    GREEN = '\033[92m'
    WARN = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'


class Status(Enum):
    LINKED = 0
    CLONED = 1
    NOT_ADDED = 2
    BAD_FILES = 3
    BAD_LINK = 3
    BAD_DIR = 4
    BROKEN_CONFIG = 5

class Desired_Status(Enum):
    LINK = Status.LINKED
    CLONE = Status.CLONED



yes_regex = re.compile("y(es)?", re.IGNORECASE)
no_regex = re.compile("n(o)?", re.IGNORECASE)

config_file_name = "meta.json"

parser = argparse.ArgumentParser()

parser.add_argument("-s", "--silent",
                    help="Do not display logs (still display prompts)",
                    action="store_true")


parser.add_argument("-y", "--yes",
                    help="Do not ask before excecuting commands",
                    action="store_true")

parser.add_argument("-r", "--remove",
                    help="When files must be removed to procede, remove them without asking (will still confirm commands unless --yes flag is enabled)",
                    action="store_true")

parsers = {}

subp = parser.add_subparsers(title="subcommands", dest="command")

parsers["sync"] = subp.add_parser("sync", help="Sync tracked files and" +
                                  " current active files")
parsers["install"] = subp.add_parser("install", help="install using pacman (Arch Linux only)")
parsers["packages"] = subp.add_parser("packages", help="list all neccecary packages")
parsers["track"] = subp.add_parser("track", help="Start tracking a new file")
parsers["status"] = subp.add_parser("status", help="Get current loaded status of" +
                                    " tracked files")
parsers["info"] = subp.add_parser("info", help="Get all static tracking "
                                  + f"information (stored in {col.BLUE}{config_file_name}{col.ENDC})")
parsers["list"] = subp.add_parser("list", help="List all tracked files")
parsers["help"] = subp.add_parser("help", help="Show this help message and exit")
parsers["location"] = subp.add_parser("location", help="Print storage location")

parsers["modify"] = subp.add_parser("modify", help=f"Modify the {col.BLUE}{config_file_name}{col.ENDC} file.")
parsers["modify"].add_argument("filename", help="Tracked file to start editing")

parsers["packages"].add_argument("--no-label","-n", help="hide track file name in list (useful to pass into pacman)", action="store_true")

parsers["info"].add_argument("-r", "--raw", help="display raw config" +
                             " file instead of formatted config",
                             action="store_true")

parsers["sync"].add_argument("-c", "--clone",
                             help="Copy instead of creating symlinks",
                             action="store_true")


parsers["track"].add_argument("-c", "--clone",
                             help="Maintain the loaded file as real files instead of replacing them with symlinks",
                             action="store_true")


parsers["track"].add_argument("filename",
                              help="Path of file to start tracking")

parsers["track"].add_argument("-t", "--title",
                              help="Title to use within dotctl")


parsers["track"].add_argument("-p", "--package", nargs="*",
                              help="Package(s) required to use these dotfiles")

for n in ("list", "status", "info", "sync", "install", "packages"):
    parsers[n].add_argument("filename", nargs='*',
                            help="Name of file(s) to operate upon.")

this_script_dir = os.path.dirname(os.path.realpath(__file__))
dots_dir = os.path.normpath(os.path.join(this_script_dir, "../dots/"))
dots = os.listdir(dots_dir)
args = parser.parse_args()

specified_files = []
if args.command == "track" or args.command == "modify":
    if len(args.filename) == 0:
        print("You must choose files to track")
        exit(1)
    else:
        specified_files = args.filename
else:
    if hasattr(args, "filename"):
        useFileSelection = len(args.filename) > 0

        if useFileSelection:
            file_args = args.filename
            for file_arg in file_args:
                if file_arg not in dots:
                    print(f"{col.FAIL}{file_arg} does not exist{col.ENDC}")
                else:
                    specified_files.append(file_arg)
        else:
            specified_files = dots

def conditional_print(value):
    if not args.silent:
        print(value)


def confirm_response(question):
    response = input(question + " (Y/N): ")
    if yes_regex.match(response):
        return True
    if no_regex.match(response):
        return False

    print(f"{col.FAIL}Could not understand \"{response}\"{col.ENDC}")
    return confirm_response(question)


def excecute_command(command):
    subprocess.run(command, shell=True)


def confirm_command(command):
    if "\n" in command:
        question = f"Would you like to excecute this command? \n{col.BLUE}{command}{col.ENDC}\n" # Multiple line formatting
    else:
        question = f"Would you like to excecute this command? {col.BLUE}{command}{col.ENDC}" # Single line formatting


    if not (args.yes and args.silent): # If we both want silence and do not want confirmation, execution logs should not be printed.
        print(f"Excecuting '{col.BLUE}{command}{col.ENDC}'...")

    if args.yes or confirm_response(question):
        excecute_command(command)
    else:
        print("Command will not be excecuted.")


def info(name):
    config_path = os.path.join(dots_dir, name, config_file_name)
    if args.raw:
        print(get_json_raw(config_path), end="")
    else:
        data = get_json(config_path)
        for d in data:
            print(f"{d}: {data[d]}")

def print_status(name):
    stat = status(name)
    if stat is Status.LINKED:
        print(col.GREEN + "linked")
    elif stat is Status.CLONED:
        print(col.GREEN + "cloned")
    else:
        print(col.FAIL, end="")
        if stat is Status.NOT_ADDED:
            print("not yet added")
        elif stat is Status.BAD_FILES:
            print("desired location contains incorrect file")
        elif stat is Status.BAD_LINK:
            print("desired location contains incorrect link")
        elif stat is Status.BAD_DIR:
            print("desired location contains incorrect directory")
        elif stat is Status.BROKEN_CONFIG:
            print("invalid config file")
        else:
            print("Unknown status.")
    print(col.ENDC, end="")

def status(name):
    try:
        data = get_json_of_name(name)
        target_files = os.path.normpath(
            os.path.join(dots_dir, name, data["target_files"])
        )
        desired_endpoint = calculate_desired_endpoint(data["desired_endpoint"])
        endpoint_with_name = os.path.join(
            desired_endpoint,
            os.path.basename(os.path.normpath(target_files))
        )

        if os.path.islink(endpoint_with_name):
            if os.path.realpath(endpoint_with_name) == target_files:
                return Status.LINKED
            else:
                return Status.BAD_LINK
        elif os.path.isdir(endpoint_with_name):
            diff = dircmp(endpoint_with_name,target_files).diff_files
            if len(diff) == 0:
                return Status.CLONED
            else:
                return Status.BAD_DIR
        elif os.path.isfile(endpoint_with_name):
            if cmp(endpoint_with_name,target_files):
                return Status.CLONED
            else:
                return Status.BAD_FILES
        else:
            return Status.NOT_ADDED
    except:
        # TODO: add more information than that it is just a broken config.
        return Status.BROKEN_CONFIG


def set_json(file, data):
    json_data = json.dumps(data, indent=4)
    with open(file, "w") as outfile:
        outfile.write(json_data)


def get_json(json_file):
    with open(json_file) as json_data:
        data = json.load(json_data)
    return data

def get_json_raw(json_file):
    with open(json_file) as json_data:
        data = json_data.read()
    return data

def canonicalize_name(name):
    return os.path.join(dots_dir, name)

def get_json_path_of_name(name):
    return os.path.join(canonicalize_name(name), config_file_name)

def get_json_of_name(name):
   return get_json(get_json_path_of_name(name))


def set_json_of_file(name, data):
    set_json(get_json_path_of_name(name), data)


def canonicalize_target_files(name, target_files):
    return os.path.normpath(os.path.join(canonicalize_name(name), target_files))

def calculate_desired_endpoint(endpoint):
    endpoint_group = glob.glob(os.path.expanduser(endpoint)) 
    if len(endpoint_group) == 0:
        raise ValueError(f"There are no files that match the pattern {col.BLUE}{endpoint_group}{endpoint_group}{col.ENDC}!")
    elif len(endpoint_group) > 1:
        raise ValueError(f"There are mutliple files that match the pattern {col.BLUE}{endpoint}{col.ENDC}: {col.BLUE}{endpoint_group}{col.ENDC}!" +
              "Multiple file syncing not yet added.")
    else:
        return endpoint_group[0]

def sync(name):
    desired_status = Desired_Status.CLONE if args.clone else Desired_Status.LINK
    desired_status_verb = "cloned" if desired_status == Desired_Status.CLONE else "linked"
    current_status = status(name)

    if desired_status.value == current_status:
        conditional_print(f"{name} is already {desired_status_verb}. There is no more work to do.")
        return

    data = get_json_of_name(name)
    target_files = canonicalize_target_files(name, data["target_files"])

    desired_endpoint = calculate_desired_endpoint(data["desired_endpoint"])
    endpoint_with_name = os.path.join(desired_endpoint, os.path.basename(target_files))

    # Remove files and links
    if os.path.islink(endpoint_with_name):
        if not args.remove:
            print(
                f"{col.BLUE}{endpoint_with_name}{col.ENDC} is a link to "
                + f"{col.BLUE}{os.path.realpath(endpoint_with_name)}{col.ENDC}."
                + f" It should be {desired_status_verb} based on {col.BLUE}{target_files}{col.ENDC}"
            )

        if args.remove or confirm_response("Remove link?"):
            confirm_command(f"rm {endpoint_with_name}")

    elif os.path.isdir(endpoint_with_name) or os.path.isfile(endpoint_with_name):
        if not args.remove:
            print(f"{col.BLUE}{endpoint_with_name}{col.ENDC} already"
                  + " exists! It must be removed before the new dotfiles can "
                  + "be added."
            )

        if args.remove or confirm_response("Remove files/directories?"):
            confirm_command(f"rm -r {endpoint_with_name}")

    # Start linking
    if os.path.isdir(endpoint_with_name) or os.path.exists(endpoint_with_name):
        print(f"{col.BLUE}{endpoint_with_name}{col.ENDC} is full. No further opperations can be done on this file.")
        return
    tracking_command = "cp -r" if desired_status == Desired_Status.CLONE else "ln -s"
    if confirm_command(f"{tracking_command} {target_files} {desired_endpoint}"):
        conditional_print(f"Sucsessfully added dotfiles from {col.BLUE}{name}{col.ENDC}!")


def for_dots(func, seperator = True, name = True, newLine = True):
    if len(specified_files) == 0:
        conditional_print("No valid files selected")
    elif len(specified_files) == 1:
        func(specified_files[0])
        return

    i = 0
    for file in specified_files:
        if i > 0 and seperator:
            print()
        if name:
            if newLine:
                print("-> ", end="")
            print(file + ": ", end="\n" if newLine else "")
        try:
            func(file)
        except Exception as err:
            if err is KeyboardInterrupt:
                print()
                sys.exit(1)
            else:
                print(f"{col.FAIL}Error! {err.args}{col.ENDC}")
        i += 1


def modify(file):
    json_location = get_json_path_of_name(file)
    excecute_command(f"if [ -z \"$EDITOR\" ]; then vi {json_location}; else $EDITOR {json_location}; fi")


def install(filename):
    packages = ""
    for file in filename:
        addition = " ".join(get_packages(file))
        packages = packages + (" " if packages != "" and addition != "" else "") + addition
    confirm_command(f"sudo pacman -S --needed {packages}")


def get_packages(file):
    packages_raw = get_json_of_name(file)
    if not "packages" in packages_raw:
       return list() 
    packages = packages_raw if isinstance(packages_raw, list) else list([packages_raw["packages"]]) 
    return filter(lambda x: x is not None,packages)


def track(file):
    file = os.path.normpath(file)
    if not os.path.isabs(file):
        file = os.path.join(os.getcwd(),file)

    if os.path.islink(file):
        conditional_print("File is already a link.")
        return

    if args.title is None:
        args.title = input("Title of new files: ")

    tracked_file_location = canonicalize_name(args.title)
    if os.path.isdir(tracked_file_location):
        conditional_print(f"{col.BLUE}{args.title}{col.ENDC} already contains files")
        if confirm_response(f"Remove tracked file {col.BLUE}{tracked_file_location}{col.ENDC}?"):
            confirm_command(f"rm -r {tracked_file_location}")

    if not os.path.isdir(tracked_file_location):
        confirm_command(f"mkdir {tracked_file_location}")
        confirm_command(f"mv {file} {tracked_file_location}")
    split_file = file.split(os.path.sep)
    target = split_file[len(split_file) - 1]
    split_file.pop(-1)
    first = "/".join(split_file)
    split_file.pop(1)
    json_to_add = json.dumps(
        {
            "desired_endpoint": first,
            "target_files": target,
            "packages": args.package if args.package is None else [],
        }, indent=4
    )
    confirm_command(F"echo '{json_to_add}' > {os.path.join(canonicalize_name(args.title), config_file_name)}")

    conditional_print("Tracking complete. Starting resyncing process:")
    sync(args.title)

try:
    if args.command is None or args.command == "help":
        parser.print_help()
    else:
        if args.command == "status":
            for_dots(print_status, False, True, False)
        if args.command == "info":
            for_dots(info, True, True, True)
        if args.command == "sync":
            for_dots(sync, not args.silent, not args.silent, not args.silent)
        if args.command == "list":
            for_dots(print, False, False)
        if args.command == "track":
            track(args.filename)
        if args.command == "install":
            install(specified_files)
        if args.command == "modify":
            modify(args.filename)
        if args.command == "packages":
            nolabel = not args.nolabel
            for_dots(lambda file: [print(package, end="\n" if nolabel else " ") for package in get_packages(file)], nolabel, nolabel, nolabel)
        if args.command == "location":
            print(dots_dir);
except KeyboardInterrupt:
    pass
