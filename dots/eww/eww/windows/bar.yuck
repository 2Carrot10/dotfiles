(defwindow bar
  :monitor 0
  :windowtype "dock"
  :geometry (geometry 
    :x "0px"
    :y "0%"
    ; Note github.com/elenapan/dotfiles: Setting width and height
    ; here causes certain animations to not display properly.
    ; Instead, we set width and height in *.scss or in the 
    ; upppermost inner widget.
    :anchor "center right"
  )
  :exclusive false
  :reserve (struts :side "top" :distance "4%")

  (revealer
    :reveal barVisible
    :transition "slideleft"
    :duration "150ms"
    (bar)
  )
)

(defwidget bar []
  (box
  :class "bar"
  (box :class "barInner"
  :width 10
  :halign "end"
  :orientation "v"
    (box :valign "start" (workspaces))
    formatedDate

    (box :valign "end" (deviceStatus))
  )
  )
)

(defwidget workspaces []

  (box :class "workspaces" :orientation "v" :space-evenly false
    ; problem is that the whole workspaceJson is getting REMADE! That's why there is no smooth anim!
    (for a in workspaceJson 
      (box :orientation "v" :space-evenly false :class "tab ${a.windowFocused ? 'high' : ''}"

        (button 
          :onclick 'swaymsg workspace ${a.name}'
          :onrightclick "eww update hoverFocus=${a.id}"
          {a.name}
        )

        (revealer 
          :transition "slidedown" 
          :reveal {windowsBarVisible} ; Add back in boolean a.windowFocused
          (box :orientation "v" :space-evenly false
            (for b in {jq(a.nodes, '[.. | has(name)]')}
              (button :class "tab ${b.focused ? 'low' : ''}" 
                :onclick 'swaymsg [pid=${b.pid}] focus'
                "Óûï"
              )
            )
          )
        )
      )
    )
  )
)

(defwidget deviceStatus []
(box :orientation "v"
  (button "‚èæ")
  ; (button "ÔâÄ")
  (button "Û∞ïæ")
  (button "‚öô")
  ; (button "Û∞ñ©")
  (button "‚èº")
  (button "ÔÇ¢")
)
)

(defwidget music []
  (box :class "music"
       :orientation "v"
       :space-evenly false
       :halign "center"
    {music != "" ? "üéµ${music}" : ""}))


(defwidget metric [label value onchange]
  (box :orientation "v"
       :class "metric"
       :space-evenly false
    (box :class "label" label)
    (scale :min 0
           :max 101
           :active {onchange != ""}
           :value 30
           :onchange onchange)))



(deflisten music :initial ""
  "playerctl --follow metadata --format '{{ artist }} - {{ title }}' || true")

(defpoll volume :interval "1s"
  "scripts/getvol")

(defpoll time :interval "10s"
  "date '+%H:%M %b %d, %Y'")

;; Clock Widgets ;;
(defwidget time []

	(box	:orientation "v" 
			:class "time" 
			:valign "end"
	(button	:onclick "scripts/popup calendar"	
			:class "time-hour" hour)
	(button	:onclick "scripts/popup calendar"	
			:class "time-min"  min)


(circular-progress :min 0 :class "progress" :draw-value true :max 100 :value 70 :thickness 5 :tooltip "text" :marks true)
(circular-progress :min 0 :class "progress" :draw-value true :max 100 :value 70 :thickness 5 :tooltip "text" :marks true)
(circular-progress :min 0 :class "progress" :draw-value true :max 100 :value 70 :thickness 5 :tooltip "text" :marks true)

      ))

;; Calendar Widgets ;;
(defwidget cal []
	(box :class "cal-box" 
		 :orientation "v"
	(box :class "cal-inner-box"
	(calendar :class "cal" 
			  :day calendar_day 
			  :month calendar_month 
			  :year calendar_year))))


;; time ;;
(defpoll hour	:interval "1s"	"date '+%H'")
(defpoll min	:interval "1s"	"date '+%M'")
(defpoll calendar_day :interval "10h"
    "date '+%d'")
(defpoll calendar_month :interval "10h"
    "scripts/calendar")
(defpoll calendar_year :interval "10h"
    "date '+%Y'")

(defwidget sidestuff []
  (box :class "sidestuff" :orientation "v" :space-evenly false :halign "end"

    (metric :label "üîä"
            :value volume
            :onchange "amixer -D pulse sset Master {}%")
    (metric :label "a"
            :value {EWW_RAM.used_mem_perc}
            :onchange "")
    (metric :label "üíæ"
            :value {round((1 - (EWW_DISK["/"].free / EWW_DISK["/"].total)) * 100, 0)}
            :onchange "")
            (color-button)
    time)


    )

;; Calendar Windows ;;
(defwindow calendar
  :monitor 0
	:geometry (geometry :x "70px" 
						:y "75%" 
						:width "270px" 
						:height "60px")
(cal))


(defvar barVisible true)
(defvar windowsBarVisible false)

(deflisten mode
  :initial "default"
  `swaymsg -mt subscribe "['mode']" | jq --unbuffered -r ".change"`
)

; Very much not performant. Make slower so that it does not update multiple times when you open a window
(deflisten workspaceJson
  `swaymsg -mt subscribe "['window']" | while a= read -r line; do swaymsg -t get_tree | jq -c '[.nodes[].nodes[] | select(.name != "__i3_scratch") | . + {windowFocused: ([.. | .focused? == true]) | contains([true])}]'; done`
)

(defpoll formatedDate :interval "1s" 'date +"%y%n%m%n%d%n%H%n%M%n"')
(defvar viewWindow false)
