(defwidget systemWidget []
  (revealer
  :transition "slideleft"
  :reveal {selectionNames["system"] != "none"}
  :duration "100ms"
    (stack
    :transition "slideleft"
    :same-size false
    :selected {selectionNames["system"]}
      (volumeWidget)
      (batteryWidget)
      (powerWidget)
    )
  )
)

(defwidget batteryWidget []
(box :orientation "v" :space-evenly false
    (panel
    {EWW_BATTERY.BAT0.capacity}
    )
    (box :vexpand true :halign "center"
    (overlay
    (panel :valign "center"
      (progress

      :vexpand true
        :flipped "true"
        :value {EWW_BATTERY.BAT0.capacity}
        :orientation "v"

        :class "${
          EWW_BATTERY.BAT0.status == 'Discharging'
            ? (EWW_BATTERY.BAT0.capacity > 30 
              ? 'battery-depleting-progress'
              : (EWW_BATTERY.BAT0.capacity > 15
                  ? 'battery-low-progress'
                  : 'battery-dire-progress'
                )
              )
            : 'battery-charging-progress'
        }"
      )
      )

  (label
  :text "Û±êã"
  )
      )
  )
  )
)

(defpoll currentVolume :interval "1s"
  :initial "0"
  :runWhile {selectionNames["system"] == 1}
  `pamixer --get-volume`
)

(defwidget volumeWidget []
  (box :vexpand true :halign "center"
    (panel
      (scale
        :orientation "v"
        :flipped true
        :min 0
        :max 100
        :value currentVolume
        :onchange `pamixer --set-volume {}`
      )
    )
  )
)

(defwidget powerWidget []
(panel
(box :orientation "v"
"poweroff"
"suspend"
"restart"
)
)
)

(defvar selectionNames `{"system":"none"}`)

(defwidget selector [?name variable ]
  (eventbox
  :cursor "pointer"
  :class { selectionNames[variable] == (name?:"on") ? "bright-highlight" : ""}

  :onclick '[ "`${SCRIPTS}/getDict selectionNames ${variable}`" = "${name?:"on"}" ] && ${SCRIPTS}/updateDict selectionNames ${variable} none || ${SCRIPTS}/updateDict selectionNames ${variable} ${name?:"on"}'
    (children)
  )
)

(defwidget selection [?name variable]
  (revealer
  :transition "slideleft"
  :reveal {selectionNames[variable] == (name?:"on")}
    (children)
  )
)
