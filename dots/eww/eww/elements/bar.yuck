(defwidget bar []
  (box
  (box :class "main-window bar"
  :width 10
  :halign "end"
  :orientation "v"
    (box :valign "start" (workspaces))
    formatedDate

    (box :valign "end" (deviceStatus))
  )
  )
)

(defwidget workspaces []

  (box :class "workspaces" :orientation "v" :space-evenly false
    (for a in workspaceJson 
      (box :orientation "v" :space-evenly false :class "tab ${a.windowFocused ? 'bright-highlight' : ''}"

        (eventbox :cursor "pointer" (button 
          :onclick 'swaymsg workspace ${a.name}'
          :onrightclick "eww update hoverFocus=${a.id}"
          {a.name}
        ))

        (revealer 
          :transition "slidedown" 
          :reveal {windowsBarVisible} ; Add back in boolean a.windowFocused
          (box :orientation "v" :space-evenly false
            (for b in {jq(a.nodes, '[.. | has(name)]')}
              (eventbox :cursor "pointer" (button 
                :class "side-tab ${b.focused ? 'dark-highlight' : ''}" 
                :onclick 'swaymsg [pid=${b.pid}] focus'
                (label
                  :justify "left"
                  :text "" ;""
                )
              ))
            )
          )
        )
      )
    )
  )
)

(defwidget deviceStatus []
(box :orientation "v"
  (systemSelector :name "a" "⏾")
  (systemSelector :name "volume" "󰕾")
  (systemSelector :name "settings" "⚙")
  (systemSelector :name "b" "⏼")
  (systemSelector :name "notifications" "")
  (button "󰖩")
  ; (button "")
)
)

(defwidget metric [label value onchange]
  (box :orientation "v"
       :class "metric"
       :space-evenly false
    (box :class "label" label)
    (scale :min 0
           :max 101
           :active {onchange != ""}
           :value 30
           :onchange onchange)))



(deflisten music :initial ""
  "playerctl --foldark-highlight metadata --format '{{ artist }} - {{ title }}' || true")

(defpoll volume :interval "1s"
  "scripts/getvol")

(defpoll time :interval "10s"
  "date '+%H:%M %b %d, %Y'")

;; time ;;
(defpoll hour	:interval "1s"	"date '+%H'")
(defpoll min	:interval "1s"	"date '+%M'")
(defpoll calendar_day :interval "10h"
    "date '+%d'")
(defpoll calendar_month :interval "10h"
    "date '+%m'")
(defpoll calendar_year :interval "10h"
    "date '+%Y'")

;; Calendar Windows ;;
(defwindow calendar
  :monitor 0
	:geometry (geometry :x "70px" 
						:y "75%" 
						:width "270px" 
						:height "60px")
(cal))


(defvar windowsBarVisible false)

(defpoll formatedDate :interval "1s" 'date +"%y%n%m%n%d%n%H%n%M%n"')
(defvar viewWindow false)
